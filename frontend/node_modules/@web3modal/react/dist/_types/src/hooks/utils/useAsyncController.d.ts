declare type Arguments<TArgs> = TArgs & {
    enabled?: boolean;
    watch?: boolean;
};
interface Options<TArgs, TReturn> {
    fetchFn: (args: TArgs) => Promise<TReturn>;
    watchFn?: (args: TArgs, callback: (watchData: TReturn) => void) => () => void;
    args: Arguments<TArgs>;
    hasRequiredArgs?: boolean;
}
export declare function useAsyncController<TArgs, TReturn>({ fetchFn, watchFn, args, hasRequiredArgs }: Options<TArgs, TReturn>): {
    data: TReturn | undefined;
    onFetch: (newArgs?: TArgs) => Promise<TReturn | undefined>;
    isLoading: boolean;
    error: Error | undefined;
};
export {};
