import type { Connector } from '@wagmi/core';
import { disconnect, fetchBalance, fetchBlockNumber, fetchEnsAddress, fetchEnsAvatar, fetchEnsName, fetchEnsResolver, fetchFeeData, fetchSigner, fetchToken, fetchTransaction, getAccount, getContract, getNetwork, getProvider, getWebSocketProvider, prepareSendTransaction, prepareWriteContract, readContract, sendTransaction, signMessage, signTypedData, switchNetwork, waitForTransaction, watchAccount, watchBlockNumber, watchContractEvent, watchNetwork, watchProvider, watchReadContract, watchSigner, watchWebSocketProvider, writeContract } from '@wagmi/core';
import type { EthereumOptions } from '../types/apiTypes';
export declare const Web3ModalEthereum: {
    createClient(options: EthereumOptions): any;
    getDefaultConnectorChainId(connector: Connector): number;
    getConnectorById(id: 'coinbaseWallet' | 'injected' | 'metaMask' | 'walletConnect'): Connector<any, any, any>;
    connectWalletConnect(onUri: (uri: string) => void): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core").Provider>>;
    connectLinking(onUri: (uri: string) => void): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core").Provider>>;
    connectCoinbaseMobile(onUri?: ((uri: string) => void) | undefined): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core").Provider>>;
    connectCoinbaseExtension(): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core").Provider>>;
    connectMetaMask(): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core").Provider>>;
    connectInjected(): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core").Provider>>;
    getAccount: typeof getAccount;
    watchAccount: typeof watchAccount;
    disconnect: typeof disconnect;
    getNetwork: typeof getNetwork;
    watchNetwork: typeof watchNetwork;
    switchNetwork: typeof switchNetwork;
    fetchBlockNumber: typeof fetchBlockNumber;
    watchBlockNumber: typeof watchBlockNumber;
    getProvider: typeof getProvider;
    watchProvider: typeof watchProvider;
    getWebSocketProvider: typeof getWebSocketProvider;
    watchWebSocketProvider: typeof watchWebSocketProvider;
    fetchBalance: typeof fetchBalance;
    fetchSigner: typeof fetchSigner;
    watchSigner: typeof watchSigner;
    signMessage: typeof signMessage;
    signTypedData: typeof signTypedData;
    fetchFeeData: typeof fetchFeeData;
    fetchEnsAddress: typeof fetchEnsAddress;
    fetchEnsAvatar: typeof fetchEnsAvatar;
    fetchEnsName: typeof fetchEnsName;
    fetchEnsResolver: typeof fetchEnsResolver;
    fetchToken: typeof fetchToken;
    fetchTransaction: typeof fetchTransaction;
    prepareSendTransaction: typeof prepareSendTransaction;
    sendTransaction: typeof sendTransaction;
    waitForTransaction: typeof waitForTransaction;
    getContract: typeof getContract;
    readContract: typeof readContract;
    prepareWriteContract: typeof prepareWriteContract;
    writeContract: typeof writeContract;
    watchContractEvent: typeof watchContractEvent;
    watchReadContract: typeof watchReadContract;
};
