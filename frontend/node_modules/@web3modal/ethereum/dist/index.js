import{chain as d,InjectedConnector as P,configureChains as S,createClient as T,connect as s,getAccount as I,watchAccount as B,disconnect as E,getNetwork as A,watchNetwork as N,switchNetwork as j,fetchBlockNumber as F,watchBlockNumber as M,getProvider as D,watchProvider as W,getWebSocketProvider as x,watchWebSocketProvider as O,fetchBalance as U,fetchSigner as R,watchSigner as $,signMessage as q,signTypedData as L,fetchFeeData as V,fetchEnsAddress as X,fetchEnsAvatar as z,fetchEnsName as J,fetchEnsResolver as _,fetchToken as G,fetchTransaction as H,prepareSendTransaction as K,sendTransaction as Q,waitForTransaction as Y,getContract as Z,readContract as ee,prepareWriteContract as te,writeContract as ne,watchContractEvent as ae,watchReadContract as re}from"@wagmi/core";import{publicProvider as m}from"@wagmi/core/providers/public";import{Buffer as ce}from"buffer";import{CoinbaseWalletConnector as oe}from"@wagmi/core/connectors/coinbaseWallet";import{MetaMaskConnector as ie}from"@wagmi/core/connectors/metaMask";import{WalletConnectConnector as se}from"@wagmi/core/connectors/walletConnect";import{alchemyProvider as le}from"@wagmi/core/providers/alchemy";import{infuraProvider as he}from"@wagmi/core/providers/infura";import{jsonRpcProvider as p}from"@wagmi/core/providers/jsonRpc";const u={id:43114,name:"Avalanche C-Chain",network:"avalanche",nativeCurrency:{decimals:18,name:"Avalanche",symbol:"AVAX"},rpcUrls:{default:"https://api.avax.network/ext/bc/C/rpc"},blockExplorers:{default:{name:"SnowTrace",url:"https://snowtrace.io"}},testnet:!1},f={id:43113,name:"Avalanche FUJI C-Chain",network:"avalancheFuji",nativeCurrency:{decimals:18,name:"Avalanche",symbol:"AVAX"},rpcUrls:{default:"https://api.avax-test.network/ext/bc/C/rpc"},blockExplorers:{default:{name:"SnowTrace Testnet",url:"https://testnet.snowtrace.io"}},testnet:!0},C={id:56,name:"Binance Smart Chain",network:"binanceSmartChain",nativeCurrency:{decimals:18,name:"Binance",symbol:"BNB"},rpcUrls:{default:"https://bsc-dataseed.binance.org"},blockExplorers:{default:{name:"BSC Scan",url:"https://bscscan.com"}},testnet:!1},w={id:97,name:"Binance Smart Chain Testnet",network:"binanceSmartChainTestnet",nativeCurrency:{decimals:18,name:"Binance",symbol:"BNB"},rpcUrls:{default:"https://data-seed-prebsc-1-s1.binance.org:8545"},blockExplorers:{default:{name:"BSC Scan testnet",url:"https://testnet.bscscan.com"}},testnet:!0},v={id:250,name:"Fantom Opera",network:"fantomOpera",nativeCurrency:{decimals:18,name:"Fantom",symbol:"FTM"},rpcUrls:{default:"https://rpc.ankr.com/fantom"},blockExplorers:{default:{name:"FTM Scan",url:"https://ftmscan.com"}},testnet:!1},b={id:4002,name:"Fantom Testnet",network:"fantomTestnet",nativeCurrency:{decimals:18,name:"Fantom",symbol:"FTM"},rpcUrls:{default:"https://rpc.testnet.fantom.network"},blockExplorers:{default:{name:"FTM Scan Testnet",url:"https://testnet.ftmscan.com"}},testnet:!0},de="eip155";var me=Object.defineProperty,pe=Object.defineProperties,ue=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,fe=Object.prototype.hasOwnProperty,Ce=Object.prototype.propertyIsEnumerable,h=(t,e,n)=>e in t?me(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,we=(t,e)=>{for(var n in e||(e={}))fe.call(e,n)&&h(t,n,e[n]);if(l)for(var n of l(e))Ce.call(e,n)&&h(t,n,e[n]);return t},ve=(t,e)=>pe(t,ue(e));const be=[u,f,C,w,v,b];function ge({projectId:t}){return p({rpc:e=>{const n=be.find(a=>a.id===e.id);return n?{http:n.rpcUrls.default}:{http:`https://rpc.walletconnect.com/v1/?chainId=${de}:${e.id}&projectId=${t}`}}})}const Me={alchemyProvider:le,infuraProvider:he,jsonRpcProvider:p,publicProvider:m,walletConnectProvider:ge},De=ve(we({},d),{avalanche:u,fantom:v,binanceSmartChain:C,avalancheFuji:f,fantomTestnet:b,binanceSmartChainTestnet:w});function ye({appName:t,chains:e}){return[new se({chains:e,options:{qrcode:!1}}),new P({chains:e,options:{shimDisconnect:!0}}),new oe({chains:e,options:{appName:t,headlessMode:!0}}),new ie({chains:e,options:{shimDisconnect:!0,shimChainChangedDisconnect:!1,UNSTABLE_shimOnConnectSelectAccount:!0}})]}typeof window<"u"&&!window.Buffer&&(window.Buffer=ce);let g;function ke(){return g}function Pe(t){var e,n,a;const r=(e=t.chains)!=null?e:[d.mainnet],c=(n=t.providers)!=null?n:[m()],o=(a=t.autoConnect)!=null?a:!0,{chains:i,provider:y,webSocketProvider:k}=S(r,c);g=T({autoConnect:o,connectors:ye({chains:i,appName:t.appName}),provider:y,webSocketProvider:k})}const We={createClient(t){return Pe(t),this},getDefaultConnectorChainId(t){return t.chains[0].id},getConnectorById(t){var e;const n=(e=ke())==null?void 0:e.connectors.find(a=>a.id===t);if(!n)throw new Error(`Missing ${t} connector`);return n},async connectWalletConnect(t){const e=this.getConnectorById("walletConnect"),n=this.getDefaultConnectorChainId(e);async function a(){return new Promise(c=>{e.once("message",async({type:o})=>{if(o==="connecting"){const i=await e.getProvider();t(i.connector.uri),c()}})})}const[r]=await Promise.all([s({connector:e,chainId:n}),a()]);return r},async connectLinking(t){const e=this.getConnectorById("walletConnect"),n=this.getDefaultConnectorChainId(e);async function a(){return new Promise(c=>{e.once("message",async({type:o})=>{if(o==="connecting"){const i=(await e.getProvider()).connector.uri;t(encodeURIComponent(i)),c()}})})}const[r]=await Promise.all([s({connector:e,chainId:n}),a()]);return r},async connectCoinbaseMobile(t){const e=this.getConnectorById("coinbaseWallet"),n=this.getDefaultConnectorChainId(e);async function a(){return new Promise(c=>{e.once("message",async({type:o})=>{if(o==="connecting"){const i=await e.getProvider();t?.(i.qrUrl),c()}})})}const[r]=await Promise.all([s({connector:e,chainId:n}),a()]);return r},async connectCoinbaseExtension(){const t=this.getConnectorById("coinbaseWallet"),e=this.getDefaultConnectorChainId(t);return await s({connector:t,chainId:e})},async connectMetaMask(){const t=this.getConnectorById("metaMask"),e=this.getDefaultConnectorChainId(t);return await s({connector:t,chainId:e})},async connectInjected(){const t=this.getConnectorById("injected"),e=this.getDefaultConnectorChainId(t);return await s({connector:t,chainId:e})},getAccount:I,watchAccount:B,disconnect:E,getNetwork:A,watchNetwork:N,switchNetwork:j,fetchBlockNumber:F,watchBlockNumber:M,getProvider:D,watchProvider:W,getWebSocketProvider:x,watchWebSocketProvider:O,fetchBalance:U,fetchSigner:R,watchSigner:$,signMessage:q,signTypedData:L,fetchFeeData:V,fetchEnsAddress:X,fetchEnsAvatar:z,fetchEnsName:J,fetchEnsResolver:_,fetchToken:G,fetchTransaction:H,prepareSendTransaction:K,sendTransaction:Q,waitForTransaction:Y,getContract:Z,readContract:ee,prepareWriteContract:te,writeContract:ne,watchContractEvent:ae,watchReadContract:re};export{We as Web3ModalEthereum,De as chains,Me as providers};
//# sourceMappingURL=index.js.map
