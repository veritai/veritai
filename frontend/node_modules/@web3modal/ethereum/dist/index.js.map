{"version":3,"file":"index.js","sources":["../src/utils/chains.ts","../src/utils/constants.ts","../src/utils/wagmiTools.ts","../src/utils/wagmiHelpers.ts","../src/api.ts"],"sourcesContent":["import type { Chain } from '@wagmi/core'\n\n// -- Avalanche ------------------------------------------------------- //\nexport const avalanche: Chain = {\n  id: 43_114,\n  name: 'Avalanche C-Chain',\n  network: 'avalanche',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Avalanche',\n    symbol: 'AVAX'\n  },\n  rpcUrls: {\n    default: 'https://api.avax.network/ext/bc/C/rpc'\n  },\n  blockExplorers: {\n    default: { name: 'SnowTrace', url: 'https://snowtrace.io' }\n  },\n  testnet: false\n}\n\nexport const avalancheFuji: Chain = {\n  id: 43_113,\n  name: 'Avalanche FUJI C-Chain',\n  network: 'avalancheFuji',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Avalanche',\n    symbol: 'AVAX'\n  },\n  rpcUrls: {\n    default: 'https://api.avax-test.network/ext/bc/C/rpc'\n  },\n  blockExplorers: {\n    default: { name: 'SnowTrace Testnet', url: 'https://testnet.snowtrace.io' }\n  },\n  testnet: true\n}\n\n// -- Binance --------------------------------------------------------- //\nexport const binanceSmartChain: Chain = {\n  id: 56,\n  name: 'Binance Smart Chain',\n  network: 'binanceSmartChain',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Binance',\n    symbol: 'BNB'\n  },\n  rpcUrls: {\n    default: 'https://bsc-dataseed.binance.org'\n  },\n  blockExplorers: {\n    default: { name: 'BSC Scan', url: 'https://bscscan.com' }\n  },\n  testnet: false\n}\n\nexport const binanceSmartChainTestnet: Chain = {\n  id: 97,\n  name: 'Binance Smart Chain Testnet',\n  network: 'binanceSmartChainTestnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Binance',\n    symbol: 'BNB'\n  },\n  rpcUrls: {\n    default: 'https://data-seed-prebsc-1-s1.binance.org:8545'\n  },\n  blockExplorers: {\n    default: { name: 'BSC Scan testnet', url: 'https://testnet.bscscan.com' }\n  },\n  testnet: true\n}\n\n// -- Fantom ---------------------------------------------------------- //\nexport const fantom: Chain = {\n  id: 250,\n  name: 'Fantom Opera',\n  network: 'fantomOpera',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Fantom',\n    symbol: 'FTM'\n  },\n  rpcUrls: {\n    default: 'https://rpc.ankr.com/fantom'\n  },\n  blockExplorers: {\n    default: { name: 'FTM Scan', url: 'https://ftmscan.com' }\n  },\n  testnet: false\n}\n\nexport const fantomTestnet: Chain = {\n  id: 4_002,\n  name: 'Fantom Testnet',\n  network: 'fantomTestnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Fantom',\n    symbol: 'FTM'\n  },\n  rpcUrls: {\n    default: 'https://rpc.testnet.fantom.network'\n  },\n  blockExplorers: {\n    default: { name: 'FTM Scan Testnet', url: 'https://testnet.ftmscan.com' }\n  },\n  testnet: true\n}\n","export const NAMESPACE = 'eip155'\n","import { chain, InjectedConnector } from '@wagmi/core'\nimport { CoinbaseWalletConnector } from '@wagmi/core/connectors/coinbaseWallet'\nimport { MetaMaskConnector } from '@wagmi/core/connectors/metaMask'\nimport { WalletConnectConnector } from '@wagmi/core/connectors/walletConnect'\nimport { alchemyProvider } from '@wagmi/core/providers/alchemy'\nimport { infuraProvider } from '@wagmi/core/providers/infura'\nimport { jsonRpcProvider } from '@wagmi/core/providers/jsonRpc'\nimport { publicProvider } from '@wagmi/core/providers/public'\nimport type { GetDefaultConnectorsOpts, GetWalletConnectProviderOpts } from '../../types/apiTypes'\nimport {\n  avalanche,\n  avalancheFuji,\n  binanceSmartChain,\n  binanceSmartChainTestnet,\n  fantom,\n  fantomTestnet\n} from './chains'\nimport { NAMESPACE } from './constants'\n\n// -- utilities ------------------------------------------------------- //\nconst customChains = [\n  avalanche,\n  avalancheFuji,\n  binanceSmartChain,\n  binanceSmartChainTestnet,\n  fantom,\n  fantomTestnet\n]\n\n// -- providers ------------------------------------------------------- //\nfunction walletConnectProvider({ projectId }: GetWalletConnectProviderOpts) {\n  return jsonRpcProvider({\n    rpc: rpcChain => {\n      const customChain = customChains.find(c => c.id === rpcChain.id)\n\n      if (customChain)\n        return {\n          http: customChain.rpcUrls.default\n        }\n\n      return {\n        http: `https://rpc.walletconnect.com/v1/?chainId=${NAMESPACE}:${rpcChain.id}&projectId=${projectId}`\n      }\n    }\n  })\n}\n\nexport const providers = {\n  alchemyProvider,\n  infuraProvider,\n  jsonRpcProvider,\n  publicProvider,\n  walletConnectProvider\n}\n\n// -- chains ---------------------------------------------------------- //\n\nexport const chains = {\n  ...chain,\n  avalanche,\n  fantom,\n  binanceSmartChain,\n  avalancheFuji,\n  fantomTestnet,\n  binanceSmartChainTestnet\n}\n\n// -- connectors ------------------------------------------------------ //\nexport function defaultConnectors({ appName, chains: connectorChains }: GetDefaultConnectorsOpts) {\n  return [\n    new WalletConnectConnector({ chains: connectorChains, options: { qrcode: false } }),\n    new InjectedConnector({ chains: connectorChains, options: { shimDisconnect: true } }),\n    new CoinbaseWalletConnector({\n      chains: connectorChains,\n      options: { appName, headlessMode: true }\n    }),\n    new MetaMaskConnector({\n      chains: connectorChains,\n      options: {\n        shimDisconnect: true,\n        shimChainChangedDisconnect: false,\n        UNSTABLE_shimOnConnectSelectAccount: true\n      }\n    })\n  ]\n}\n","import type * as WagmiTypes from '@wagmi/core'\nimport { chain, configureChains, createClient } from '@wagmi/core'\nimport { publicProvider } from '@wagmi/core/providers/public'\nimport { Buffer } from 'buffer'\nimport type { EthereumOptions } from '../../types/apiTypes'\nimport { defaultConnectors } from './wagmiTools'\n\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nif (typeof window !== 'undefined' && !window.Buffer) window.Buffer = Buffer\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet client = undefined as WagmiTypes.Client<any, any> | undefined\n\nexport function getClient() {\n  return client\n}\n\nexport function initializeClient(options: EthereumOptions) {\n  const configChains = options.chains ?? [chain.mainnet]\n  const configProviders = options.providers ?? [publicProvider()]\n  const configAutoConnect = options.autoConnect ?? true\n\n  const { chains, provider, webSocketProvider } = configureChains(configChains, configProviders)\n\n  const wagmiClient = createClient({\n    autoConnect: configAutoConnect,\n    connectors: defaultConnectors({ chains, appName: options.appName }),\n    provider,\n    webSocketProvider\n  })\n\n  client = wagmiClient\n}\n","import type { Connector } from '@wagmi/core'\nimport {\n  connect,\n  disconnect,\n  fetchBalance,\n  fetchBlockNumber,\n  fetchEnsAddress,\n  fetchEnsAvatar,\n  fetchEnsName,\n  fetchEnsResolver,\n  fetchFeeData,\n  fetchSigner,\n  fetchToken,\n  fetchTransaction,\n  getAccount,\n  getContract,\n  getNetwork,\n  getProvider,\n  getWebSocketProvider,\n  prepareSendTransaction,\n  prepareWriteContract,\n  readContract,\n  sendTransaction,\n  signMessage,\n  signTypedData,\n  switchNetwork,\n  waitForTransaction,\n  watchAccount,\n  watchBlockNumber,\n  watchContractEvent,\n  watchNetwork,\n  watchProvider,\n  watchReadContract,\n  watchSigner,\n  watchWebSocketProvider,\n  writeContract\n} from '@wagmi/core'\nimport type { EthereumOptions } from '../types/apiTypes'\nimport { getClient, initializeClient } from './utils/wagmiHelpers'\n\nexport const Web3ModalEthereum = {\n  // -- config ------------------------------------------------------- //\n  createClient(options: EthereumOptions) {\n    initializeClient(options)\n\n    return this\n  },\n\n  // -- chains ------------------------------------------------------- //\n  getDefaultConnectorChainId(connector: Connector) {\n    const chainId = connector.chains[0].id\n\n    return chainId\n  },\n\n  // -- connectors --------------------------------------------------- //\n  getConnectorById(id: 'coinbaseWallet' | 'injected' | 'metaMask' | 'walletConnect') {\n    const connector = getClient()?.connectors.find(item => item.id === id)\n    if (!connector) throw new Error(`Missing ${id} connector`)\n\n    return connector\n  },\n\n  async connectWalletConnect(onUri: (uri: string) => void) {\n    const connector = this.getConnectorById('walletConnect')\n    const chainId = this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            onUri(provider.connector.uri)\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  },\n\n  async connectLinking(onUri: (uri: string) => void) {\n    const connector = this.getConnectorById('walletConnect')\n    const chainId = this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            const wcUri: string = provider.connector.uri\n            onUri(encodeURIComponent(wcUri))\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  },\n\n  async connectCoinbaseMobile(onUri?: (uri: string) => void) {\n    const connector = this.getConnectorById('coinbaseWallet')\n    const chainId = this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            onUri?.(provider.qrUrl)\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  },\n\n  async connectCoinbaseExtension() {\n    const connector = this.getConnectorById('coinbaseWallet')\n    const chainId = this.getDefaultConnectorChainId(connector)\n    const data = await connect({ connector, chainId })\n\n    return data\n  },\n\n  async connectMetaMask() {\n    const connector = this.getConnectorById('metaMask')\n    const chainId = this.getDefaultConnectorChainId(connector)\n    const data = await connect({ connector, chainId })\n\n    return data\n  },\n\n  async connectInjected() {\n    const connector = this.getConnectorById('injected')\n    const chainId = this.getDefaultConnectorChainId(connector)\n    const data = await connect({ connector, chainId })\n\n    return data\n  },\n\n  // -- accounts ----------------------------------------------------- //\n  getAccount,\n\n  watchAccount,\n\n  disconnect,\n\n  // -- network ------------------------------------------------------ //\n  getNetwork,\n\n  watchNetwork,\n\n  switchNetwork,\n\n  // -- block -------------------------------------------------------- //\n  fetchBlockNumber,\n\n  watchBlockNumber,\n\n  // -- provider ----------------------------------------------------- //\n  getProvider,\n\n  watchProvider,\n\n  getWebSocketProvider,\n\n  watchWebSocketProvider,\n\n  // -- balance ------------------------------------------------------ //\n  fetchBalance,\n\n  // -- signer ------------------------------------------------------- //\n  fetchSigner,\n\n  watchSigner,\n\n  signMessage,\n\n  signTypedData,\n\n  // -- fees ---------------------------------------------------------- //\n  fetchFeeData,\n\n  // -- ens ----------------------------------------------------------- //\n  fetchEnsAddress,\n\n  fetchEnsAvatar,\n\n  fetchEnsName,\n\n  fetchEnsResolver,\n\n  // -- token --------------------------------------------------------- //\n  fetchToken,\n\n  // -- transactions  ------------------------------------------------- //\n  fetchTransaction,\n\n  prepareSendTransaction,\n\n  sendTransaction,\n\n  waitForTransaction,\n\n  // -- contracts  ---------------------------------------------------- //\n  getContract,\n\n  readContract,\n\n  prepareWriteContract,\n\n  writeContract,\n\n  watchContractEvent,\n\n  watchReadContract\n}\n"],"names":["avalanche","avalancheFuji","binanceSmartChain","binanceSmartChainTestnet","fantom","fantomTestnet","NAMESPACE","customChains","walletConnectProvider","projectId","jsonRpcProvider","rpcChain","customChain","c","providers","alchemyProvider","infuraProvider","publicProvider","chains","__spreadProps","__spreadValues","chain","defaultConnectors","appName","connectorChains","WalletConnectConnector","InjectedConnector","CoinbaseWalletConnector","MetaMaskConnector","Buffer","client","getClient","initializeClient","options","_a","_b","_c","configChains","configProviders","configAutoConnect","provider","webSocketProvider","configureChains","createClient","Web3ModalEthereum","connector","id","item","onUri","chainId","getProviderUri","resolve","type","data","connect","wcUri","getAccount","watchAccount","disconnect","getNetwork","watchNetwork","switchNetwork","fetchBlockNumber","watchBlockNumber","getProvider","watchProvider","getWebSocketProvider","watchWebSocketProvider","fetchBalance","fetchSigner","watchSigner","signMessage","signTypedData","fetchFeeData","fetchEnsAddress","fetchEnsAvatar","fetchEnsName","fetchEnsResolver","fetchToken","fetchTransaction","prepareSendTransaction","sendTransaction","waitForTransaction","getContract","readContract","prepareWriteContract","writeContract","watchContractEvent","watchReadContract"],"mappings":"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"}