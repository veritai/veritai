import type { ClientCtrlSetEthereumClientArgs, ClientCtrlState } from '../../../types/statefullCtrlTypes';
export declare const ClientCtrl: {
    state: ClientCtrlState;
    subscribe(callback: (newState: ClientCtrlState) => void): () => void;
    ethereum(): {
        createClient(options: import("@web3modal/ethereum").EthereumOptions): any;
        getDefaultConnectorChainId(connector: import("@web3modal/ethereum").Connector<any, any, any>): number;
        getConnectorById(id: "coinbaseWallet" | "injected" | "metaMask" | "walletConnect"): import("@web3modal/ethereum").Connector<any, any, any>;
        connectWalletConnect(onUri: (uri: string) => void): Promise<import("@wagmi/core").ConnectResult<import("@web3modal/ethereum").Provider>>;
        connectLinking(onUri: (uri: string) => void): Promise<import("@wagmi/core").ConnectResult<import("@web3modal/ethereum").Provider>>;
        connectCoinbaseMobile(onUri?: ((uri: string) => void) | undefined): Promise<import("@wagmi/core").ConnectResult<import("@web3modal/ethereum").Provider>>;
        connectCoinbaseExtension(): Promise<import("@wagmi/core").ConnectResult<import("@web3modal/ethereum").Provider>>;
        connectMetaMask(): Promise<import("@wagmi/core").ConnectResult<import("@web3modal/ethereum").Provider>>;
        connectInjected(): Promise<import("@wagmi/core").ConnectResult<import("@web3modal/ethereum").Provider>>;
        getAccount: typeof import("@wagmi/core").getAccount;
        watchAccount: typeof import("@wagmi/core").watchAccount;
        disconnect: typeof import("@wagmi/core").disconnect;
        getNetwork: typeof import("@wagmi/core").getNetwork;
        watchNetwork: typeof import("@wagmi/core").watchNetwork;
        switchNetwork: typeof import("@wagmi/core").switchNetwork;
        fetchBlockNumber: typeof import("@wagmi/core").fetchBlockNumber;
        watchBlockNumber: typeof import("@wagmi/core").watchBlockNumber;
        getProvider: typeof import("@wagmi/core").getProvider;
        watchProvider: typeof import("@wagmi/core").watchProvider;
        getWebSocketProvider: typeof import("@wagmi/core").getWebSocketProvider;
        watchWebSocketProvider: typeof import("@wagmi/core").watchWebSocketProvider;
        fetchBalance: typeof import("@wagmi/core").fetchBalance;
        fetchSigner: typeof import("@wagmi/core").fetchSigner;
        watchSigner: typeof import("@wagmi/core").watchSigner;
        signMessage: typeof import("@wagmi/core").signMessage;
        signTypedData: typeof import("@wagmi/core").signTypedData;
        fetchFeeData: typeof import("@wagmi/core").fetchFeeData;
        fetchEnsAddress: typeof import("@wagmi/core").fetchEnsAddress;
        fetchEnsAvatar: typeof import("@wagmi/core").fetchEnsAvatar;
        fetchEnsName: typeof import("@wagmi/core").fetchEnsName;
        fetchEnsResolver: typeof import("@wagmi/core").fetchEnsResolver;
        fetchToken: typeof import("@wagmi/core").fetchToken;
        fetchTransaction: typeof import("@wagmi/core").fetchTransaction;
        prepareSendTransaction: typeof import("@wagmi/core").prepareSendTransaction;
        sendTransaction: typeof import("@wagmi/core").sendTransaction;
        waitForTransaction: typeof import("@wagmi/core").waitForTransaction;
        getContract: typeof import("@wagmi/core").getContract;
        readContract: typeof import("@wagmi/core").readContract;
        prepareWriteContract: typeof import("@wagmi/core").prepareWriteContract;
        writeContract: typeof import("@wagmi/core").writeContract;
        watchContractEvent: typeof import("@wagmi/core").watchContractEvent;
        watchReadContract: typeof import("@wagmi/core").watchReadContract;
    };
    setEthereumClient(args: ClientCtrlSetEthereumClientArgs): Promise<void>;
};
